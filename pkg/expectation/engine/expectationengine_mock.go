// Code generated by mockery v2.42.3. DO NOT EDIT.

package engine

import (
	http "net/http"

	expectation "github.com/DolusMockServer/dolus/pkg/expectation"

	mock "github.com/stretchr/testify/mock"

	schema "github.com/DolusMockServer/dolus/pkg/schema"
)

// ExpectationEngineMock is an autogenerated mock type for the ExpectationEngine type
type ExpectationEngineMock struct {
	mock.Mock
}

type ExpectationEngineMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpectationEngineMock) EXPECT() *ExpectationEngineMock_Expecter {
	return &ExpectationEngineMock_Expecter{mock: &_m.Mock}
}

// AddExpectation provides a mock function with given fields: _a0
func (_m *ExpectationEngineMock) AddExpectation(_a0 expectation.Expectation) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddExpectation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(expectation.Expectation) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpectationEngineMock_AddExpectation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddExpectation'
type ExpectationEngineMock_AddExpectation_Call struct {
	*mock.Call
}

// AddExpectation is a helper method to define mock.On call
//   - _a0 expectation.Expectation
func (_e *ExpectationEngineMock_Expecter) AddExpectation(_a0 interface{}) *ExpectationEngineMock_AddExpectation_Call {
	return &ExpectationEngineMock_AddExpectation_Call{Call: _e.mock.On("AddExpectation", _a0)}
}

func (_c *ExpectationEngineMock_AddExpectation_Call) Run(run func(_a0 expectation.Expectation)) *ExpectationEngineMock_AddExpectation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(expectation.Expectation))
	})
	return _c
}

func (_c *ExpectationEngineMock_AddExpectation_Call) Return(_a0 error) *ExpectationEngineMock_AddExpectation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExpectationEngineMock_AddExpectation_Call) RunAndReturn(run func(expectation.Expectation) error) *ExpectationEngineMock_AddExpectation_Call {
	_c.Call.Return(run)
	return _c
}

// AddExpectations provides a mock function with given fields: expectations
func (_m *ExpectationEngineMock) AddExpectations(expectations []expectation.Expectation) {
	_m.Called(expectations)
}

// ExpectationEngineMock_AddExpectations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddExpectations'
type ExpectationEngineMock_AddExpectations_Call struct {
	*mock.Call
}

// AddExpectations is a helper method to define mock.On call
//   - expectations []expectation.Expectation
func (_e *ExpectationEngineMock_Expecter) AddExpectations(expectations interface{}) *ExpectationEngineMock_AddExpectations_Call {
	return &ExpectationEngineMock_AddExpectations_Call{Call: _e.mock.On("AddExpectations", expectations)}
}

func (_c *ExpectationEngineMock_AddExpectations_Call) Run(run func(expectations []expectation.Expectation)) *ExpectationEngineMock_AddExpectations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]expectation.Expectation))
	})
	return _c
}

func (_c *ExpectationEngineMock_AddExpectations_Call) Return() *ExpectationEngineMock_AddExpectations_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExpectationEngineMock_AddExpectations_Call) RunAndReturn(run func([]expectation.Expectation)) *ExpectationEngineMock_AddExpectations_Call {
	_c.Call.Return(run)
	return _c
}

// GetExpectations provides a mock function with given fields: expectationType, path, method
func (_m *ExpectationEngineMock) GetExpectations(expectationType *expectation.ExpectationType, path *string, method *string) []expectation.Expectation {
	ret := _m.Called(expectationType, path, method)

	if len(ret) == 0 {
		panic("no return value specified for GetExpectations")
	}

	var r0 []expectation.Expectation
	if rf, ok := ret.Get(0).(func(*expectation.ExpectationType, *string, *string) []expectation.Expectation); ok {
		r0 = rf(expectationType, path, method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]expectation.Expectation)
		}
	}

	return r0
}

// ExpectationEngineMock_GetExpectations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpectations'
type ExpectationEngineMock_GetExpectations_Call struct {
	*mock.Call
}

// GetExpectations is a helper method to define mock.On call
//   - expectationType *expectation.ExpectationType
//   - path *string
//   - method *string
func (_e *ExpectationEngineMock_Expecter) GetExpectations(expectationType interface{}, path interface{}, method interface{}) *ExpectationEngineMock_GetExpectations_Call {
	return &ExpectationEngineMock_GetExpectations_Call{Call: _e.mock.On("GetExpectations", expectationType, path, method)}
}

func (_c *ExpectationEngineMock_GetExpectations_Call) Run(run func(expectationType *expectation.ExpectationType, path *string, method *string)) *ExpectationEngineMock_GetExpectations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*expectation.ExpectationType), args[1].(*string), args[2].(*string))
	})
	return _c
}

func (_c *ExpectationEngineMock_GetExpectations_Call) Return(_a0 []expectation.Expectation) *ExpectationEngineMock_GetExpectations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExpectationEngineMock_GetExpectations_Call) RunAndReturn(run func(*expectation.ExpectationType, *string, *string) []expectation.Expectation) *ExpectationEngineMock_GetExpectations_Call {
	_c.Call.Return(run)
	return _c
}

// GetResponseForRequest provides a mock function with given fields: request, reqParams, path
func (_m *ExpectationEngineMock) GetResponseForRequest(request *http.Request, reqParams schema.RequestParameters, path string) (*expectation.Response, error) {
	ret := _m.Called(request, reqParams, path)

	if len(ret) == 0 {
		panic("no return value specified for GetResponseForRequest")
	}

	var r0 *expectation.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, schema.RequestParameters, string) (*expectation.Response, error)); ok {
		return rf(request, reqParams, path)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, schema.RequestParameters, string) *expectation.Response); ok {
		r0 = rf(request, reqParams, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expectation.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, schema.RequestParameters, string) error); ok {
		r1 = rf(request, reqParams, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectationEngineMock_GetResponseForRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResponseForRequest'
type ExpectationEngineMock_GetResponseForRequest_Call struct {
	*mock.Call
}

// GetResponseForRequest is a helper method to define mock.On call
//   - request *http.Request
//   - reqParams schema.RequestParameters
//   - path string
func (_e *ExpectationEngineMock_Expecter) GetResponseForRequest(request interface{}, reqParams interface{}, path interface{}) *ExpectationEngineMock_GetResponseForRequest_Call {
	return &ExpectationEngineMock_GetResponseForRequest_Call{Call: _e.mock.On("GetResponseForRequest", request, reqParams, path)}
}

func (_c *ExpectationEngineMock_GetResponseForRequest_Call) Run(run func(request *http.Request, reqParams schema.RequestParameters, path string)) *ExpectationEngineMock_GetResponseForRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(schema.RequestParameters), args[2].(string))
	})
	return _c
}

func (_c *ExpectationEngineMock_GetResponseForRequest_Call) Return(_a0 *expectation.Response, _a1 error) *ExpectationEngineMock_GetResponseForRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExpectationEngineMock_GetResponseForRequest_Call) RunAndReturn(run func(*http.Request, schema.RequestParameters, string) (*expectation.Response, error)) *ExpectationEngineMock_GetResponseForRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoutes provides a mock function with given fields:
func (_m *ExpectationEngineMock) GetRoutes() []schema.Route {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRoutes")
	}

	var r0 []schema.Route
	if rf, ok := ret.Get(0).(func() []schema.Route); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.Route)
		}
	}

	return r0
}

// ExpectationEngineMock_GetRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoutes'
type ExpectationEngineMock_GetRoutes_Call struct {
	*mock.Call
}

// GetRoutes is a helper method to define mock.On call
func (_e *ExpectationEngineMock_Expecter) GetRoutes() *ExpectationEngineMock_GetRoutes_Call {
	return &ExpectationEngineMock_GetRoutes_Call{Call: _e.mock.On("GetRoutes")}
}

func (_c *ExpectationEngineMock_GetRoutes_Call) Run(run func()) *ExpectationEngineMock_GetRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExpectationEngineMock_GetRoutes_Call) Return(_a0 []schema.Route) *ExpectationEngineMock_GetRoutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExpectationEngineMock_GetRoutes_Call) RunAndReturn(run func() []schema.Route) *ExpectationEngineMock_GetRoutes_Call {
	_c.Call.Return(run)
	return _c
}

// NewExpectationEngineMock creates a new instance of ExpectationEngineMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpectationEngineMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpectationEngineMock {
	mock := &ExpectationEngineMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
