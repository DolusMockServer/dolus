// Code generated by mockery v2.42.3. DO NOT EDIT.

package engine

import (
	schema "github.com/DolusMockServer/dolus/pkg/schema"
	mock "github.com/stretchr/testify/mock"
)

// RouteManagerMock is an autogenerated mock type for the RouteManager type
type RouteManagerMock struct {
	mock.Mock
}

type RouteManagerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RouteManagerMock) EXPECT() *RouteManagerMock_Expecter {
	return &RouteManagerMock_Expecter{mock: &_m.Mock}
}

// AddRoute provides a mock function with given fields: route, routeProperty
func (_m *RouteManagerMock) AddRoute(route schema.Route, routeProperty schema.RouteProperty) {
	_m.Called(route, routeProperty)
}

// RouteManagerMock_AddRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoute'
type RouteManagerMock_AddRoute_Call struct {
	*mock.Call
}

// AddRoute is a helper method to define mock.On call
//   - route schema.Route
//   - routeProperty schema.RouteProperty
func (_e *RouteManagerMock_Expecter) AddRoute(route interface{}, routeProperty interface{}) *RouteManagerMock_AddRoute_Call {
	return &RouteManagerMock_AddRoute_Call{Call: _e.mock.On("AddRoute", route, routeProperty)}
}

func (_c *RouteManagerMock_AddRoute_Call) Run(run func(route schema.Route, routeProperty schema.RouteProperty)) *RouteManagerMock_AddRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Route), args[1].(schema.RouteProperty))
	})
	return _c
}

func (_c *RouteManagerMock_AddRoute_Call) Return() *RouteManagerMock_AddRoute_Call {
	_c.Call.Return()
	return _c
}

func (_c *RouteManagerMock_AddRoute_Call) RunAndReturn(run func(schema.Route, schema.RouteProperty)) *RouteManagerMock_AddRoute_Call {
	_c.Call.Return(run)
	return _c
}

// GetRouteProperties provides a mock function with given fields:
func (_m *RouteManagerMock) GetRouteProperties() map[schema.Route]schema.RouteProperty {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRouteProperties")
	}

	var r0 map[schema.Route]schema.RouteProperty
	if rf, ok := ret.Get(0).(func() map[schema.Route]schema.RouteProperty); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[schema.Route]schema.RouteProperty)
		}
	}

	return r0
}

// RouteManagerMock_GetRouteProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouteProperties'
type RouteManagerMock_GetRouteProperties_Call struct {
	*mock.Call
}

// GetRouteProperties is a helper method to define mock.On call
func (_e *RouteManagerMock_Expecter) GetRouteProperties() *RouteManagerMock_GetRouteProperties_Call {
	return &RouteManagerMock_GetRouteProperties_Call{Call: _e.mock.On("GetRouteProperties")}
}

func (_c *RouteManagerMock_GetRouteProperties_Call) Run(run func()) *RouteManagerMock_GetRouteProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RouteManagerMock_GetRouteProperties_Call) Return(_a0 map[schema.Route]schema.RouteProperty) *RouteManagerMock_GetRouteProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RouteManagerMock_GetRouteProperties_Call) RunAndReturn(run func() map[schema.Route]schema.RouteProperty) *RouteManagerMock_GetRouteProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetRouteProperty provides a mock function with given fields: route
func (_m *RouteManagerMock) GetRouteProperty(route schema.Route) (schema.RouteProperty, RouteManagerError) {
	ret := _m.Called(route)

	if len(ret) == 0 {
		panic("no return value specified for GetRouteProperty")
	}

	var r0 schema.RouteProperty
	var r1 RouteManagerError
	if rf, ok := ret.Get(0).(func(schema.Route) (schema.RouteProperty, RouteManagerError)); ok {
		return rf(route)
	}
	if rf, ok := ret.Get(0).(func(schema.Route) schema.RouteProperty); ok {
		r0 = rf(route)
	} else {
		r0 = ret.Get(0).(schema.RouteProperty)
	}

	if rf, ok := ret.Get(1).(func(schema.Route) RouteManagerError); ok {
		r1 = rf(route)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(RouteManagerError)
		}
	}

	return r0, r1
}

// RouteManagerMock_GetRouteProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouteProperty'
type RouteManagerMock_GetRouteProperty_Call struct {
	*mock.Call
}

// GetRouteProperty is a helper method to define mock.On call
//   - route schema.Route
func (_e *RouteManagerMock_Expecter) GetRouteProperty(route interface{}) *RouteManagerMock_GetRouteProperty_Call {
	return &RouteManagerMock_GetRouteProperty_Call{Call: _e.mock.On("GetRouteProperty", route)}
}

func (_c *RouteManagerMock_GetRouteProperty_Call) Run(run func(route schema.Route)) *RouteManagerMock_GetRouteProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Route))
	})
	return _c
}

func (_c *RouteManagerMock_GetRouteProperty_Call) Return(_a0 schema.RouteProperty, _a1 RouteManagerError) *RouteManagerMock_GetRouteProperty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RouteManagerMock_GetRouteProperty_Call) RunAndReturn(run func(schema.Route) (schema.RouteProperty, RouteManagerError)) *RouteManagerMock_GetRouteProperty_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoutes provides a mock function with given fields:
func (_m *RouteManagerMock) GetRoutes() []schema.Route {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRoutes")
	}

	var r0 []schema.Route
	if rf, ok := ret.Get(0).(func() []schema.Route); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.Route)
		}
	}

	return r0
}

// RouteManagerMock_GetRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoutes'
type RouteManagerMock_GetRoutes_Call struct {
	*mock.Call
}

// GetRoutes is a helper method to define mock.On call
func (_e *RouteManagerMock_Expecter) GetRoutes() *RouteManagerMock_GetRoutes_Call {
	return &RouteManagerMock_GetRoutes_Call{Call: _e.mock.On("GetRoutes")}
}

func (_c *RouteManagerMock_GetRoutes_Call) Run(run func()) *RouteManagerMock_GetRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RouteManagerMock_GetRoutes_Call) Return(_a0 []schema.Route) *RouteManagerMock_GetRoutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RouteManagerMock_GetRoutes_Call) RunAndReturn(run func() []schema.Route) *RouteManagerMock_GetRoutes_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoute provides a mock function with given fields: route
func (_m *RouteManagerMock) RemoveRoute(route schema.Route) {
	_m.Called(route)
}

// RouteManagerMock_RemoveRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoute'
type RouteManagerMock_RemoveRoute_Call struct {
	*mock.Call
}

// RemoveRoute is a helper method to define mock.On call
//   - route schema.Route
func (_e *RouteManagerMock_Expecter) RemoveRoute(route interface{}) *RouteManagerMock_RemoveRoute_Call {
	return &RouteManagerMock_RemoveRoute_Call{Call: _e.mock.On("RemoveRoute", route)}
}

func (_c *RouteManagerMock_RemoveRoute_Call) Run(run func(route schema.Route)) *RouteManagerMock_RemoveRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Route))
	})
	return _c
}

func (_c *RouteManagerMock_RemoveRoute_Call) Return() *RouteManagerMock_RemoveRoute_Call {
	_c.Call.Return()
	return _c
}

func (_c *RouteManagerMock_RemoveRoute_Call) RunAndReturn(run func(schema.Route)) *RouteManagerMock_RemoveRoute_Call {
	_c.Call.Return(run)
	return _c
}

// NewRouteManagerMock creates a new instance of RouteManagerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRouteManagerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RouteManagerMock {
	mock := &RouteManagerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
