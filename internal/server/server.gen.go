// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Callback defines model for Callback.
type Callback struct {
	HttpMethod  string                  `json:"httpMethod"`
	RequestBody *map[string]interface{} `json:"requestBody,omitempty"`
	Timeout     int                     `json:"timeout"`
	Url         string                  `json:"url"`
}

// Expectation defines model for Expectation.
type Expectation struct {
	Callback *Callback `json:"callback,omitempty"`
	Priority int       `json:"priority"`
	Request  Request   `json:"request"`
	Response Response  `json:"response"`
}

// Expectations defines model for Expectations.
type Expectations struct {
	Expectations []Expectation `json:"expectations"`
}

// Request defines model for Request.
type Request struct {
	Body   *map[string]interface{} `json:"body,omitempty"`
	Method string                  `json:"method"`
	Path   string                  `json:"path"`
}

// Response defines model for Response.
type Response struct {
	Body   *map[string]interface{} `json:"body,omitempty"`
	Status int                     `json:"status"`
}

// Route defines model for Route.
type Route struct {
	Operation string `json:"operation"`
	Path      string `json:"path"`
}

// PostV1DolusExpectationsJSONBody defines parameters for PostV1DolusExpectations.
type PostV1DolusExpectationsJSONBody struct {
	Callback *Callback `json:"callback,omitempty"`
	Priority int       `json:"priority"`
	Request  struct {
		Method string `json:"method"`
		Path   string `json:"path"`
	} `json:"request"`
	Response struct {
		Status *int `json:"status,omitempty"`
	} `json:"response"`
}

// GetV1DolusLogsParams defines parameters for GetV1DolusLogs.
type GetV1DolusLogsParams struct {
	// Lines number of log lines to return
	Lines *int `form:"lines,omitempty" json:"lines,omitempty"`
}
//
// GetV1DolusLogsWsParams defines parameters for GetV1DolusLogsWs.
type GetV1DolusLogsWsParams struct {
	// Lines number of log lines to return
	Lines *string `form:"lines,omitempty" json:"lines,omitempty"`
}

// PostV1DolusExpectationsJSONRequestBody defines body for PostV1DolusExpectations for application/json ContentType.
type PostV1DolusExpectationsJSONRequestBody PostV1DolusExpectationsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Fetch expectations
	// (GET /v1/dolus/expectations)
	GetV1DolusExpectations(ctx echo.Context) error

	// (POST /v1/dolus/expectations)
	PostV1DolusExpectations(ctx echo.Context) error
	// Your GET endpoint
	// (GET /v1/dolus/logs)
	GetV1DolusLogs(ctx echo.Context, params GetV1DolusLogsParams) error
	// Your GET endpoint
	// (GET /v1/dolus/logs/ws)
	GetV1DolusLogsWs(ctx echo.Context, params GetV1DolusLogsWsParams) error
	// Your GET endpoint
	// (GET /v1/dolus/routes)
	GetV1DolusRoutes(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1DolusExpectations converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DolusExpectations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1DolusExpectations(ctx)
	return err
}

// PostV1DolusExpectations converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1DolusExpectations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1DolusExpectations(ctx)
	return err
}

// GetV1DolusLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DolusLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1DolusLogsParams
	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1DolusLogs(ctx, params)
	return err
}

// GetV1DolusLogsWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DolusLogsWs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1DolusLogsWsParams
	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1DolusLogsWs(ctx, params)
	return err
}

// GetV1DolusRoutes converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DolusRoutes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1DolusRoutes(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/dolus/expectations", wrapper.GetV1DolusExpectations)
	router.POST(baseURL+"/v1/dolus/expectations", wrapper.PostV1DolusExpectations)
	router.GET(baseURL+"/v1/dolus/logs", wrapper.GetV1DolusLogs)
	router.GET(baseURL+"/v1/dolus/logs/ws", wrapper.GetV1DolusLogsWs)
	router.GET(baseURL+"/v1/dolus/routes", wrapper.GetV1DolusRoutes)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX3W7jNhN9FYHfXvpb/dixY112my4WbdEiWLQoFntBiyOZtvhjcqRYCfzuBSnFluwY",
	"UbrFXvWOtsiZOefMHFFPJFNCKwkSLUmfiM3WIKhffqBluaLZ1q21URoMcvBP1oj6V8C1Yu4XNhpISiwa",
	"LgsyIfv/W1S65MUa3WPOSEpijbMbjGjGtGDkcJgQA7sKLP6gWNMLolYbyPBKkK18EHWd1FMtpPJBkAtQ",
	"FfYCcIlQgLkSIS+kSqqCKabXcx+hMuVYDKDhRkuzmOLuZk8OzyC4AUbSL31S2rCn8r66JZYuw5HUySjI",
	"ZrPPbxYLsYuXZuYLvttryJAiV/JSmKwn2TsDOUnJ/8KTwGGnbnis4jAh2nBlODYvkHiS6bWA9902f8Jq",
	"JS28fqTbd07ksaBT9l7Ury8RB3sqdNlycNeug3hIiKzKsg82GmBb+TZs94ius8nHu89kQjTFNUlJaFEZ",
	"CJVhYMLkHOiqa2OHswQEkqKpYEI04Cf2rOYTecdUWfkqkdqtSwHyk8SpjyfonqRxNCGCS5JGjhaLFN1+",
	"UijFAkYb0vsziaLD4awl7GVPwNlTjiDsa+L0u+xwZJwaQ5srnYoJq5t82uAGFsvL6RhU0ZuHQe3jZiJn",
	"9XylRUx3ybT03XN/EnKIffUGd5mJOWvkjDeLW218WPE2iyt2STHTN4zLTeLPt50z7vQjbm+X65w+xEme",
	"XdLnQx0r6vF3f5yQMRg30Ci2qGuB0yLpqDs18T/nrq6TfZQ3j7DDh5r0O3ekMc83XNFSoBWzZX0Jv4s2",
	"wN3VPQ44E5zFSSYWFc6bFriq8AXUbn001zHCmdxul9PdfKaz2c2bZX8wdKM2tmJTLuursp+K6jPgAYyD",
	"f5vzhu3j2SoqC/fmdHm4zJUvs4vXWtOE1GCsx0/i95EbfqVBUs1JSqbv3V8tQs9WWMehPxeeu0wBPjsD",
	"mxmuW0LJnWRacYkBt0GuTJADZmsuiwCGLnDE+8nbMOAf8Y8uy5lZPBuwT5hEUWvAEkH63FTrkmd+d7ix",
	"raKtv73B/WwryhDHbz+3PV4JQU1DUvKTAzJE4RpBtZ40hPO7slfxDK5Eo6F8xzvAMNU1g7w6BK/b2qCZ",
	"z16yw+RXHeZwuIjz3w3jW24YnS0Nhi2+nO4PBigC6+zlZA2lKvqWcG24f3HbHBmGCkAwlqRfzlPISqzA",
	"BCoPSlUEJZdgA1SBAayMJM7TSEp2FRgnraTCieh3kUlvXi765esQ3mC0/1KVCT7efQ6gM68rFmsfY2Fy",
	"xhv6sHskL1AQPoxl4c/vy8NxNv8NGiKlLBR8SjXPp+c0GPfKGsPCfbvxGy1+1E23fY2e33HHmP5YSqbz",
	"5QyA3apkq2+76bBg6mdp/Seo/3xMw7BUGS3XymIaR7cRcZq8eJ953NNZsV1CVEWO5r8DAAD//wwR+AHH",
	"DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
