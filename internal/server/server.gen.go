// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Callback defines model for Callback.
type Callback struct {
	HttpMethod  string                  `json:"httpMethod"`
	RequestBody *map[string]interface{} `json:"requestBody,omitempty"`
	Timeout     int                     `json:"timeout"`
	Url         string                  `json:"url"`
}

// Expectation defines model for Expectation.
type Expectation struct {
	Callback *Callback `json:"callback,omitempty"`
	Priority int       `json:"priority"`
	Request  Request   `json:"request"`
	Response Response  `json:"response"`
}

// Expectations defines model for Expectations.
type Expectations struct {
	Expectations []Expectation `json:"expectations"`
}

// Request defines model for Request.
type Request struct {
	Body   *map[string]interface{} `json:"body,omitempty"`
	Method string                  `json:"method"`
	Path   string                  `json:"path"`
}

// Response defines model for Response.
type Response struct {
	Body   *map[string]interface{} `json:"body,omitempty"`
	Status int                     `json:"status"`
}

// Route defines model for Route.
type Route struct {
	Operation string `json:"operation"`
	Path      string `json:"path"`
}

// PostV1DolusExpectationsJSONBody defines parameters for PostV1DolusExpectations.
type PostV1DolusExpectationsJSONBody struct {
	Callback *Callback `json:"callback,omitempty"`
	Priority int       `json:"priority"`
	Request  struct {
		Method string `json:"method"`
		Path   string `json:"path"`
	} `json:"request"`
	Response struct {
		Status *int `json:"status,omitempty"`
	} `json:"response"`
}

// GetV1DolusLogsParams defines parameters for GetV1DolusLogs.
type GetV1DolusLogsParams struct {
	// Lines number of log lines to return
	Lines *int `form:"lines,omitempty" json:"lines,omitempty"`
}

// GetV1DolusLogsWsParams defines parameters for GetV1DolusLogsWs.
type GetV1DolusLogsWsParams struct {
	// Lines number of log lines to return
	Lines *string `form:"lines,omitempty" json:"lines,omitempty"`
}

// PostV1DolusExpectationsJSONRequestBody defines body for PostV1DolusExpectations for application/json ContentType.
type PostV1DolusExpectationsJSONRequestBody PostV1DolusExpectationsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1DolusExpectations request
	GetV1DolusExpectations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1DolusExpectationsWithBody request with any body
	PostV1DolusExpectationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1DolusExpectations(ctx context.Context, body PostV1DolusExpectationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DolusLogs request
	GetV1DolusLogs(ctx context.Context, params *GetV1DolusLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DolusLogsWs request
	GetV1DolusLogsWs(ctx context.Context, params *GetV1DolusLogsWsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DolusRoutes request
	GetV1DolusRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1DolusExpectations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DolusExpectationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DolusExpectationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DolusExpectationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DolusExpectations(ctx context.Context, body PostV1DolusExpectationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DolusExpectationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DolusLogs(ctx context.Context, params *GetV1DolusLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DolusLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DolusLogsWs(ctx context.Context, params *GetV1DolusLogsWsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DolusLogsWsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DolusRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DolusRoutesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1DolusExpectationsRequest generates requests for GetV1DolusExpectations
func NewGetV1DolusExpectationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dolus/expectations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1DolusExpectationsRequest calls the generic PostV1DolusExpectations builder with application/json body
func NewPostV1DolusExpectationsRequest(server string, body PostV1DolusExpectationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1DolusExpectationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1DolusExpectationsRequestWithBody generates requests for PostV1DolusExpectations with any type of body
func NewPostV1DolusExpectationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dolus/expectations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1DolusLogsRequest generates requests for GetV1DolusLogs
func NewGetV1DolusLogsRequest(server string, params *GetV1DolusLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dolus/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Lines != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lines", runtime.ParamLocationQuery, *params.Lines); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DolusLogsWsRequest generates requests for GetV1DolusLogsWs
func NewGetV1DolusLogsWsRequest(server string, params *GetV1DolusLogsWsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dolus/logs/ws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Lines != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lines", runtime.ParamLocationQuery, *params.Lines); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DolusRoutesRequest generates requests for GetV1DolusRoutes
func NewGetV1DolusRoutesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dolus/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1DolusExpectationsWithResponse request
	GetV1DolusExpectationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DolusExpectationsResponse, error)

	// PostV1DolusExpectationsWithBodyWithResponse request with any body
	PostV1DolusExpectationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DolusExpectationsResponse, error)

	PostV1DolusExpectationsWithResponse(ctx context.Context, body PostV1DolusExpectationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DolusExpectationsResponse, error)

	// GetV1DolusLogsWithResponse request
	GetV1DolusLogsWithResponse(ctx context.Context, params *GetV1DolusLogsParams, reqEditors ...RequestEditorFn) (*GetV1DolusLogsResponse, error)

	// GetV1DolusLogsWsWithResponse request
	GetV1DolusLogsWsWithResponse(ctx context.Context, params *GetV1DolusLogsWsParams, reqEditors ...RequestEditorFn) (*GetV1DolusLogsWsResponse, error)

	// GetV1DolusRoutesWithResponse request
	GetV1DolusRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DolusRoutesResponse, error)
}

type GetV1DolusExpectationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Expectations
}

// Status returns HTTPResponse.Status
func (r GetV1DolusExpectationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DolusExpectationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1DolusExpectationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1DolusExpectationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1DolusExpectationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DolusLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1DolusLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DolusLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DolusLogsWsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1DolusLogsWsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DolusLogsWsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DolusRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Route
}

// Status returns HTTPResponse.Status
func (r GetV1DolusRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DolusRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1DolusExpectationsWithResponse request returning *GetV1DolusExpectationsResponse
func (c *ClientWithResponses) GetV1DolusExpectationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DolusExpectationsResponse, error) {
	rsp, err := c.GetV1DolusExpectations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DolusExpectationsResponse(rsp)
}

// PostV1DolusExpectationsWithBodyWithResponse request with arbitrary body returning *PostV1DolusExpectationsResponse
func (c *ClientWithResponses) PostV1DolusExpectationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DolusExpectationsResponse, error) {
	rsp, err := c.PostV1DolusExpectationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DolusExpectationsResponse(rsp)
}

func (c *ClientWithResponses) PostV1DolusExpectationsWithResponse(ctx context.Context, body PostV1DolusExpectationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DolusExpectationsResponse, error) {
	rsp, err := c.PostV1DolusExpectations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DolusExpectationsResponse(rsp)
}

// GetV1DolusLogsWithResponse request returning *GetV1DolusLogsResponse
func (c *ClientWithResponses) GetV1DolusLogsWithResponse(ctx context.Context, params *GetV1DolusLogsParams, reqEditors ...RequestEditorFn) (*GetV1DolusLogsResponse, error) {
	rsp, err := c.GetV1DolusLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DolusLogsResponse(rsp)
}

// GetV1DolusLogsWsWithResponse request returning *GetV1DolusLogsWsResponse
func (c *ClientWithResponses) GetV1DolusLogsWsWithResponse(ctx context.Context, params *GetV1DolusLogsWsParams, reqEditors ...RequestEditorFn) (*GetV1DolusLogsWsResponse, error) {
	rsp, err := c.GetV1DolusLogsWs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DolusLogsWsResponse(rsp)
}

// GetV1DolusRoutesWithResponse request returning *GetV1DolusRoutesResponse
func (c *ClientWithResponses) GetV1DolusRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DolusRoutesResponse, error) {
	rsp, err := c.GetV1DolusRoutes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DolusRoutesResponse(rsp)
}

// ParseGetV1DolusExpectationsResponse parses an HTTP response from a GetV1DolusExpectationsWithResponse call
func ParseGetV1DolusExpectationsResponse(rsp *http.Response) (*GetV1DolusExpectationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DolusExpectationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Expectations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1DolusExpectationsResponse parses an HTTP response from a PostV1DolusExpectationsWithResponse call
func ParsePostV1DolusExpectationsResponse(rsp *http.Response) (*PostV1DolusExpectationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1DolusExpectationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1DolusLogsResponse parses an HTTP response from a GetV1DolusLogsWithResponse call
func ParseGetV1DolusLogsResponse(rsp *http.Response) (*GetV1DolusLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DolusLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1DolusLogsWsResponse parses an HTTP response from a GetV1DolusLogsWsWithResponse call
func ParseGetV1DolusLogsWsResponse(rsp *http.Response) (*GetV1DolusLogsWsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DolusLogsWsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1DolusRoutesResponse parses an HTTP response from a GetV1DolusRoutesWithResponse call
func ParseGetV1DolusRoutesResponse(rsp *http.Response) (*GetV1DolusRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DolusRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Fetch expectations
	// (GET /v1/dolus/expectations)
	GetV1DolusExpectations(ctx echo.Context) error

	// (POST /v1/dolus/expectations)
	PostV1DolusExpectations(ctx echo.Context) error
	// Your GET endpoint
	// (GET /v1/dolus/logs)
	GetV1DolusLogs(ctx echo.Context, params GetV1DolusLogsParams) error
	// Your GET endpoint
	// (GET /v1/dolus/logs/ws)
	GetV1DolusLogsWs(ctx echo.Context, params GetV1DolusLogsWsParams) error
	// Your GET endpoint
	// (GET /v1/dolus/routes)
	GetV1DolusRoutes(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1DolusExpectations converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DolusExpectations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1DolusExpectations(ctx)
	return err
}

// PostV1DolusExpectations converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1DolusExpectations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1DolusExpectations(ctx)
	return err
}

// GetV1DolusLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DolusLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1DolusLogsParams
	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1DolusLogs(ctx, params)
	return err
}

// GetV1DolusLogsWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DolusLogsWs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1DolusLogsWsParams
	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1DolusLogsWs(ctx, params)
	return err
}

// GetV1DolusRoutes converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DolusRoutes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1DolusRoutes(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/dolus/expectations", wrapper.GetV1DolusExpectations)
	router.POST(baseURL+"/v1/dolus/expectations", wrapper.PostV1DolusExpectations)
	router.GET(baseURL+"/v1/dolus/logs", wrapper.GetV1DolusLogs)
	router.GET(baseURL+"/v1/dolus/logs/ws", wrapper.GetV1DolusLogsWs)
	router.GET(baseURL+"/v1/dolus/routes", wrapper.GetV1DolusRoutes)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXW4/bNhP9KwK/PPqLbl5f9Nh0GwRt0WIRtCiCPNDiSKYtXkyOtNYu/N8LUVpb8gWr",
	"bYo89U22yJk55wzPUM8kVUIrCRItSZ6JTdcgqHv8QItiRdNt86yN0mCQg3uzRtS/Aq4Va35hrYEkxKLh",
	"MicTsv+/RaULnq+xec0ZSUiocXqHAU2ZFowcDhNiYFeCxR8Uq3tB1GoDKd4IspWPoqqiKtZCKhcEuQBV",
	"Yi8Alwg5mBsRslyqqMyZYno9cxFKU4zFABrutDTzGHd3e3J4AcENMJJ86ZPShj2V97V5xKLJcCR1Mgqy",
	"2eyzu/lc7MKlmbqC7/caUqTIlbwUJu1J9s5ARhLyP/8ksN+p6x+rOEyINlwZjvUVEk8yvRbwoVvmdlit",
	"pIXXt3Trzok8FnTK3ov69RpxsKdCFy0H9+2zFw4JkWVR9MEGA2wr14btGtF1Nvl4/5lMiKa4JgnxLSoD",
	"vjIMjB+dA111bdzgLACBJGhKmBAN+Im9qPlM3jFVlK5KpHbbpAD5SWLs4gm6J0kYTIjgkiRBQ4tFis16",
	"kivFPEZr0vszCoLD4awl7GVPwNlbjiDsa+L0u+xwZJwaQ+sbnYoRq+osrnED8+Xl6RhU0TsPg9rHnYmM",
	"VbOVFiHdRXHhuufhJOQQ++oN7jIVM1bLKa/nC21cWPE2i8t3UT7Vd4zLTeT2t50zbvcTbhfLdUYfwyhL",
	"L+lzoY4V9fh7OJ6QMRg3UCs2ryqBcR511J2a+J9zV1XRPsjqJ9jhY0X6nTvSmGcbrmgh0IrpsrqE30Ub",
	"4O7qHgecCc7CKBXzEmd1C1yVeAV183w01zHCmcxul/FuNtXp9O7Nsj8aulEbW7KYy+qm7Kei+gw4AOPg",
	"LzJes304XQVF3kzOJg+XmXJldvFaa5qQCox1+En4PmgOv9IgqeYkIfH75q8WoWPLr0Lf7fPPXSYHl52B",
	"TQ3XLaHkXjKtuESPWy9TxssA0zWXuQdDFzji/eRsGPCP8Mcmy5lZvBiwSxgFQWvAEkG63FTrgqdutb+x",
	"raKtv73B/WwryhDHbz+3PV4KQU1NEvJTA+QcxTUh6rCsCmEXPN/N2smnVWtcQ8y/K3sT9ODeNBrvd7wo",
	"DFPdctGbJ+V17xt0/NkkHia/aUOHw0Wc/64h33IN6bxrcCLDSwv4YIAitJ8AVw1xXc3oev+kGIhuDp5M",
	"plB531xu2cQvzbKGMUMFIBhLki/ndchSrMB4KvMKlXsFl2A9VJ4BLI0kjTuShOxKMI3+kopGabeKTHqH",
	"6qKpvg45GJjEX6o03sf7zx50NnjDI+xTKEzGeE0fd0/XKPAfx7Lw5/fl4XiA/w0aAqUs5DymmmfxOQ2m",
	"GX5jWHhoF37jsBh1Z24H8vltecz4GEtJPFtOAdhCRVu96Ma4BVO9SOs+Zt2HaOL7hUppsVYWkzBYBKTR",
	"5OrN6GlPp/l2CUEZNDT/HQAA//8VOpL2ERAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
