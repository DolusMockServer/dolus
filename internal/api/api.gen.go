// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ExpectationTypeParameter.
const (
	ExpectationTypeParameterALL     ExpectationTypeParameter = "ALL"
	ExpectationTypeParameterCUSTOM  ExpectationTypeParameter = "CUSTOM"
	ExpectationTypeParameterDEFAULT ExpectationTypeParameter = "DEFAULT"
)

// Defines values for MethodParameter.
const (
	MethodParameterCONNECT MethodParameter = "CONNECT"
	MethodParameterDELETE  MethodParameter = "DELETE"
	MethodParameterGET     MethodParameter = "GET"
	MethodParameterHEAD    MethodParameter = "HEAD"
	MethodParameterOPTIONS MethodParameter = "OPTIONS"
	MethodParameterPATCH   MethodParameter = "PATCH"
	MethodParameterPOST    MethodParameter = "POST"
	MethodParameterPUT     MethodParameter = "PUT"
	MethodParameterTRACE   MethodParameter = "TRACE"
)

// Defines values for GetExpectationsParamsExpectationType.
const (
	GetExpectationsParamsExpectationTypeALL     GetExpectationsParamsExpectationType = "ALL"
	GetExpectationsParamsExpectationTypeCUSTOM  GetExpectationsParamsExpectationType = "CUSTOM"
	GetExpectationsParamsExpectationTypeDEFAULT GetExpectationsParamsExpectationType = "DEFAULT"
)

// Defines values for GetExpectationsParamsMethod.
const (
	GetExpectationsParamsMethodCONNECT GetExpectationsParamsMethod = "CONNECT"
	GetExpectationsParamsMethodDELETE  GetExpectationsParamsMethod = "DELETE"
	GetExpectationsParamsMethodGET     GetExpectationsParamsMethod = "GET"
	GetExpectationsParamsMethodHEAD    GetExpectationsParamsMethod = "HEAD"
	GetExpectationsParamsMethodOPTIONS GetExpectationsParamsMethod = "OPTIONS"
	GetExpectationsParamsMethodPATCH   GetExpectationsParamsMethod = "PATCH"
	GetExpectationsParamsMethodPOST    GetExpectationsParamsMethod = "POST"
	GetExpectationsParamsMethodPUT     GetExpectationsParamsMethod = "PUT"
	GetExpectationsParamsMethodTRACE   GetExpectationsParamsMethod = "TRACE"
)

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponseBody

// Callback defines model for Callback.
type Callback struct {
	HttpMethod  string                  `json:"httpMethod"`
	RequestBody *map[string]interface{} `json:"requestBody,omitempty"`
	Timeout     int                     `json:"timeout"`
	Url         string                  `json:"url"`
}

// ErrorResponseBody defines model for ErrorResponseBody.
type ErrorResponseBody struct {
	Message string `json:"message"`
}

// Expectation defines model for Expectation.
type Expectation struct {
	Callback *Callback `json:"callback,omitempty"`
	Priority int       `json:"priority"`
	Request  Request   `json:"request"`
	Response Response  `json:"response"`
}

// Expectations defines model for Expectations.
type Expectations struct {
	Expectations []Expectation `json:"expectations"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponseBody

// Request defines model for Request.
type Request struct {
	Body   *map[string]interface{} `json:"body,omitempty"`
	Method string                  `json:"method"`
	Path   string                  `json:"path"`
}

// Response defines model for Response.
type Response struct {
	Body   *map[string]interface{} `json:"body,omitempty"`
	Status int                     `json:"status"`
}

// Route defines model for Route.
type Route struct {
	Operation string `json:"operation"`
	Path      string `json:"path"`
}

// ExpectationTypeParameter defines model for ExpectationTypeParameter.
type ExpectationTypeParameter string

// MethodParameter defines model for MethodParameter.
type MethodParameter string

// PathParameter defines model for PathParameter.
type PathParameter = string

// GetExpectationsParams defines parameters for GetExpectations.
type GetExpectationsParams struct {
	// ExpectationType The type of expectation to return
	ExpectationType *GetExpectationsParamsExpectationType `form:"expectationType,omitempty" json:"expectationType,omitempty"`

	// Path The path of the expectation
	Path *PathParameter `form:"path,omitempty" json:"path,omitempty"`

	// Method The http method of the expectation
	Method *GetExpectationsParamsMethod `form:"method,omitempty" json:"method,omitempty"`
}

// GetExpectationsParamsExpectationType defines parameters for GetExpectations.
type GetExpectationsParamsExpectationType string

// GetExpectationsParamsMethod defines parameters for GetExpectations.
type GetExpectationsParamsMethod string

// GetLogsParams defines parameters for GetLogs.
type GetLogsParams struct {
	// Lines number of log lines to return
	Lines *int `form:"lines,omitempty" json:"lines,omitempty"`
}

// CreateExpectationJSONRequestBody defines body for CreateExpectation for application/json ContentType.
type CreateExpectationJSONRequestBody = Expectation

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetExpectations request
	GetExpectations(ctx context.Context, params *GetExpectationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateExpectationWithBody request with any body
	CreateExpectationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateExpectation(ctx context.Context, body CreateExpectationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogs request
	GetLogs(ctx context.Context, params *GetLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoutes request
	GetRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetExpectations(ctx context.Context, params *GetExpectationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExpectationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateExpectationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateExpectationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateExpectation(ctx context.Context, body CreateExpectationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateExpectationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogs(ctx context.Context, params *GetLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoutesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetExpectationsRequest generates requests for GetExpectations
func NewGetExpectationsRequest(server string, params *GetExpectationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dolus/expectations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExpectationType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expectationType", runtime.ParamLocationQuery, *params.ExpectationType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Method != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method", runtime.ParamLocationQuery, *params.Method); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateExpectationRequest calls the generic CreateExpectation builder with application/json body
func NewCreateExpectationRequest(server string, body CreateExpectationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateExpectationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateExpectationRequestWithBody generates requests for CreateExpectation with any type of body
func NewCreateExpectationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dolus/expectations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogsRequest generates requests for GetLogs
func NewGetLogsRequest(server string, params *GetLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dolus/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Lines != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lines", runtime.ParamLocationQuery, *params.Lines); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoutesRequest generates requests for GetRoutes
func NewGetRoutesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/dolus/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetExpectationsWithResponse request
	GetExpectationsWithResponse(ctx context.Context, params *GetExpectationsParams, reqEditors ...RequestEditorFn) (*GetExpectationsResponse, error)

	// CreateExpectationWithBodyWithResponse request with any body
	CreateExpectationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateExpectationResponse, error)

	CreateExpectationWithResponse(ctx context.Context, body CreateExpectationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateExpectationResponse, error)

	// GetLogsWithResponse request
	GetLogsWithResponse(ctx context.Context, params *GetLogsParams, reqEditors ...RequestEditorFn) (*GetLogsResponse, error)

	// GetRoutesWithResponse request
	GetRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRoutesResponse, error)
}

type GetExpectationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Expectations
	JSON400      *BadRequest
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetExpectationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpectationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateExpectationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateExpectationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateExpectationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Route
}

// Status returns HTTPResponse.Status
func (r GetRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetExpectationsWithResponse request returning *GetExpectationsResponse
func (c *ClientWithResponses) GetExpectationsWithResponse(ctx context.Context, params *GetExpectationsParams, reqEditors ...RequestEditorFn) (*GetExpectationsResponse, error) {
	rsp, err := c.GetExpectations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExpectationsResponse(rsp)
}

// CreateExpectationWithBodyWithResponse request with arbitrary body returning *CreateExpectationResponse
func (c *ClientWithResponses) CreateExpectationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateExpectationResponse, error) {
	rsp, err := c.CreateExpectationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateExpectationResponse(rsp)
}

func (c *ClientWithResponses) CreateExpectationWithResponse(ctx context.Context, body CreateExpectationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateExpectationResponse, error) {
	rsp, err := c.CreateExpectation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateExpectationResponse(rsp)
}

// GetLogsWithResponse request returning *GetLogsResponse
func (c *ClientWithResponses) GetLogsWithResponse(ctx context.Context, params *GetLogsParams, reqEditors ...RequestEditorFn) (*GetLogsResponse, error) {
	rsp, err := c.GetLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogsResponse(rsp)
}

// GetRoutesWithResponse request returning *GetRoutesResponse
func (c *ClientWithResponses) GetRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRoutesResponse, error) {
	rsp, err := c.GetRoutes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoutesResponse(rsp)
}

// ParseGetExpectationsResponse parses an HTTP response from a GetExpectationsWithResponse call
func ParseGetExpectationsResponse(rsp *http.Response) (*GetExpectationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExpectationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Expectations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateExpectationResponse parses an HTTP response from a CreateExpectationWithResponse call
func ParseCreateExpectationResponse(rsp *http.Response) (*CreateExpectationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateExpectationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLogsResponse parses an HTTP response from a GetLogsWithResponse call
func ParseGetLogsResponse(rsp *http.Response) (*GetLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRoutesResponse parses an HTTP response from a GetRoutesWithResponse call
func ParseGetRoutesResponse(rsp *http.Response) (*GetRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get expectations
	// (GET /v1/dolus/expectations)
	GetExpectations(ctx echo.Context, params GetExpectationsParams) error
	// Create an expectation
	// (POST /v1/dolus/expectations)
	CreateExpectation(ctx echo.Context) error
	// Get the mock server logs
	// (GET /v1/dolus/logs)
	GetLogs(ctx echo.Context, params GetLogsParams) error
	// Get all the mock server routes
	// (GET /v1/dolus/routes)
	GetRoutes(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetExpectations converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpectations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExpectationsParams
	// ------------- Optional query parameter "expectationType" -------------

	err = runtime.BindQueryParameter("form", true, false, "expectationType", ctx.QueryParams(), &params.ExpectationType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expectationType: %s", err))
	}

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "method" -------------

	err = runtime.BindQueryParameter("form", true, false, "method", ctx.QueryParams(), &params.Method)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter method: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpectations(ctx, params)
	return err
}

// CreateExpectation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateExpectation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateExpectation(ctx)
	return err
}

// GetLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogsParams
	// ------------- Optional query parameter "lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "lines", ctx.QueryParams(), &params.Lines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLogs(ctx, params)
	return err
}

// GetRoutes converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoutes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoutes(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/dolus/expectations", wrapper.GetExpectations)
	router.POST(baseURL+"/v1/dolus/expectations", wrapper.CreateExpectation)
	router.GET(baseURL+"/v1/dolus/logs", wrapper.GetLogs)
	router.GET(baseURL+"/v1/dolus/routes", wrapper.GetRoutes)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXT2/buBP9KsL8etSvktNdYKGb42q3xrpx4DinIgdaGttsJFIhR0GMQt99QVK2/ro2",
	"0GD3ktjicOa9mTej8Q9IZF5IgYI0RD+gYIrlSKjst/itwIQYcSnWhwLvj4fmLEWdKF6YM4hgvUePDgV6",
	"cuthc8sj6SmkUgnwgRvDlxLVAXwQLEeIALsRwAed7DFnJgKKMofoG0wXC/Dhc/zn9HGxBh9mjw/r5Vd4",
	"8sFEhAg0KS52UFU+fEXay/QC0D1R4eXW0uClPbYxn0Hq7EcB/hUbWPfLB/PvSzz9bL492mfT9ewL+LBe",
	"TWexgb68u4tn5mR5v54v7x4ssUW8jsfp3DPaXyBTMNpfz8JYdzj0Y1bHQyuAW5au8KVETVYcShaoiKM9",
	"y1FrtsMxJz4ofCm5wtSk52hoGHLKjGWslFQr1IUUGm9lahDWTuTmOyYElQ8zlmUbljwPQ5sCukqPRHfB",
	"UZP125w3jonnKEtqnXFBuENlDkuVXabUAuBuNE5bLE8ERsgNM/DvJ7jV3sPoSSv7HxRuIYL/Bc2wCGqV",
	"BCeSlQ+F4lJxOoxnVjVK+pnDo+DsDUfg8pXarp+ZE6AmesvrUz8nPrz9H99YXmRYzz/72Zt0EyLKLGuT",
	"DTvcNraYzqYeGlE9Imz3RRBokgoDqVJUwU2f6KYWg+GZISFEpEr0oUCaW71z+/dDKrPSoiSmn00IFHNB",
	"n6y/nL1BNAl9yM0QCG1XEyNjDzspUy9lB2g9vAnDyvZ+SxJ6qAnsnXLCXF8qTltl1SnjTCkDoVevToC2",
	"nNvPR5Q8F4RKsOwB1SsqK/7/oJ/OjsrNuUmUnx9iTiuXoNbzvPbTArw6yX0EZiO2K3EedTJs6x6e2rAD",
	"pI42hkSWNALDfD5NpV9LTOOqDcmGHeAxLrjYSuu8NnVN5sMrKu3euZOPoUEhCxSs4BDBp4/mkcNl4Qev",
	"k8DeC/r9skMavsRjkRaSC/K49rZSeVukZM/FzsOu6E9U5nagIPWaor26fRtvycYkOLvaVf7Fu92t5IoL",
	"/a2sempGnk3MTRi6kScIhc0RK4qMJxZf8F07KTRby5XzRruidvO9/NvU77d3jNjakkbi3bLUa73Tfn/H",
	"wGNjbwTB0cxzdt7R0Add5jlTB6enruBMp0k3zLrKmylkhHFn1extXO9dR3Avp55kJsNectjSHjf31GOi",
	"syAbm6ZVM7lrt+ig2RbmfNBk3eiizDeozDKeyZ2XcYH64g8gazW2kTcTttcsg7KZzT+XybOnXXktlS47",
	"ZSbeT/mtnMUv9uVVC4Ebv8NVYLRTB2xZlg0Y1/Tcrxf7yJXH7vJ2WY+CIJMJy/ZSUzQJ/wiheqr+CQAA",
	"///tHubh/Q4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
