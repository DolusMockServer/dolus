openapi: 3.1.0
info:
  title: dolus
  version: '1.0'
  description: 'This API allows you to manage expectations, routes, and logs for a mock server.'
  contact:
    name: API Support
    url: 'https://github.com/DolusMockServer/dolus'
    email: dolus254@gmail.com
  license:
    name: MIT License
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: 'http://localhost:1080'
tags:
  - name: expectations
    description: Operations related to managing expectations in the mock server
  - name: logs
    description: Operations related to accessing and managing mock server logs
  - name: routes
    description: Operations related to retrieving and managing mock server routes
paths:
  /v1/dolus/expectations:
    get:
      summary: Retrieve all expectations
      description: 'Fetches a list of all current expectations set in the mock server, optionally filtered by type, path, and method.'
      tags:
        - expectations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expectations'
              examples:
                AllExpectations:
                  value:
                    expectations:
                      - priority: 0
                        request:
                          path: /store/order/2
                          method: GET
                        response:
                          status: 200
                          body:
                            complete: true
                            status: good day
                      - priority: 1
                        request:
                          path: /store/order/3
                          method: POST
                        response:
                          status: 201
                          body:
                            order: created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      operationId: getExpectations
      parameters:
        - $ref: '#/components/parameters/ExpectationTypeParameter'
        - $ref: '#/components/parameters/PathParameter'
        - $ref: '#/components/parameters/MethodParameter'
    post:
      summary: Create a new expectation
      description: 'Adds a new expectation to the mock server, defining how the server should respond to specific requests.'
      tags:
        - expectations
      operationId: createExpectation
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expectation'
              examples:
                CreateExpectationResponse:
                  value:
                    priority: 0
                    request:
                      path: /store/order/count
                      method: GET
                    response:
                      status: 200
                      body:
                        orderCount: 2
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expectation'
              x-examples:
                Example 1:
                  priority: 0
                  request:
                    path: /store/order/2
                    method: GET
                    body: null
                  response:
                    body:
                      complete: true
                      petId:
                        id:
                          $dolus:
                            task: GenInt32
                          max: 10
                          min: 0
                      status: good day
                    status: 200
                  callback: null
            examples:
              CreateExpectatationRequest:
                value:
                  priority: 0
                  request:
                    path: /store/order/count
                    method: GET
                  response:
                    status: 200
                    body:
                      orderCount: 2
  /v1/dolus/routes:
    get:
      summary: Retrieve all mock server routes
      description: 'Fetches a list of all routes currently defined in the mock server, providing information about the paths and operations supported.'
      tags:
        - routes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
              examples:
                AllRoutes:
                  value:
                    - path: '/store/order/{orderId}'
                      operation: GET
                    - path: /store/order/count
                      operation: GET
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      operationId: getRoutes
  /v1/dolus/logs:
    get:
      summary: Retrieve the mock server logs
      description: 'Fetches the logs from the mock server, optionally limited to a specified number of log lines, to help in debugging and monitoring.'
      tags:
        - logs
      responses:
        '200':
          description: OK
          content:
            text/plain:
              examples:
                Logs:
                  value: 'time=2024-06-20T11:10:55Z level=info msg=Received request for path /store/order/2/p and method GET'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      operationId: getLogs
      parameters:
        - schema:
            type: integer
          in: query
          name: lines
          description: number of log lines to return
components:
  schemas:
    Expectation:
      type: object
      x-examples:
        Example 1:
          priority: 0
          request:
            path: /store/order/2
            method: GET
            body: null
          response:
            body:
              complete: true
              petId:
                id:
                  $dolus:
                    task: GenInt32
                  max: 10
                  min: 0
              status: good day
            status: 200
          callback: null
      description: 'Represents an expectation set in the mock server, including the priority, request details, response details, and optional callback configuration.'
      required:
        - priority
        - request
        - response
      properties:
        priority:
          type: integer
          description: The priority level of the expectation. Higher values indicate higher priority.
        request:
          $ref: '#/components/schemas/Request'
          description: The request that the mock server should match.
        response:
          $ref: '#/components/schemas/Response'
          description: The response that the mock server should return.
        callback:
          $ref: '#/components/schemas/Callback'
          description: Optional configuration for a callback triggered by the mock server.
      examples:
        - priority: 0
          request:
            path: /store/order/count
            method: GET
          response:
            status: 200
            body:
              orderCount: 2
    Callback:
      title: Callback
      type: object
      description: 'Defines a callback that will be triggered by the mock server, specifying the HTTP method, request body, URL, and timeout.'
      required:
        - httpMethod
        - url
        - timeout
      properties:
        httpMethod:
          type: string
          description: 'The HTTP method used for the callback request (e.g., POST, GET).'
        requestBody:
          type: object
          description: The body of the callback request.
        url:
          type: string
          description: The URL to which the callback request will be sent.
        timeout:
          type: integer
          description: Wait time in milliseconds before the callback request is invoked.
      examples:
        - httpMethod: POST
          requestBody:
            orderCount: '2'
          url: 'https://store.com/count'
          timeout: 250
    Request:
      title: Request
      type: object
      description: 'Details of the request that the mock server should match, including the path, HTTP method, and optional request body.'
      required:
        - path
        - method
      properties:
        path:
          type: string
          description: The path of the request to match.
        method:
          type: string
          description: 'The HTTP method of the request (e.g., GET, POST).'
        body:
          type: object
          description: Optional body of the request.
      examples:
        - path: /store/order/count
          method: GET
    Response:
      title: Response
      type: object
      description: 'Details of the response that the mock server should return, including the status code and optional response body.'
      required:
        - status
      properties:
        status:
          type: integer
          description: The HTTP status code of the response.
        body:
          type: object
          description: |
            Optional body of the response.
      examples:
        - status: 200
          body:
            orderCount: 2
    Expectations:
      title: Expectations
      type: object
      description: 'A collection of expectations, each defining a request-response pair or callback configuration for the mock server.'
      required:
        - expectations
      properties:
        expectations:
          type: array
          description: A list of expectation objects.
          items:
            $ref: '#/components/schemas/Expectation'
      examples:
        - expectations:
            - priority: 0
              request:
                path: string
                method: string
                body: {}
              response:
                status: 0
                body: {}
              callback:
                httpMethod: string
                requestBody: {}
                url: string
                timeout: 0
    Route:
      title: Route
      type: object
      description: 'Represents a route defined in the mock server, including the path and the operation (HTTP method).'
      required:
        - path
        - operation
      properties:
        path:
          type: string
          description: The path of the route.
        operation:
          type: string
          description: 'The HTTP method of the route (e.g., GET, POST).'
      examples:
        - path: /store/order
          operation: GET
    BadRequest:
      $ref: '#/components/schemas/ErrorResponseBody'
      description: 'Error response body for a bad request, typically including an error message.'
      examples:
        - message: bad request
    InternalServerError:
      $ref: '#/components/schemas/ErrorResponseBody'
      description: 'Error response body for an internal server error, typically including an error message.'
      examples:
        - message: internal server error
    ErrorResponseBody:
      title: ErrorResponseBody
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: message describing error that has occurred
      examples:
        - message: error occurred
  parameters:
    ExpectationTypeParameter:
      name: expectationType
      in: query
      schema:
        type: string
        enum:
          - DEFAULT
          - CUSTOM
      description: 'Parameter specifying the type of expectation to return, can be either DEFAULT or CUSTOM.'
    PathParameter:
      name: path
      in: query
      required: false
      schema:
        type: string
      description: Path of the expectation to filter by.
    MethodParameter:
      name: method
      in: query
      schema:
        type: string
        enum:
          - GET
          - POST
          - HEAD
          - PUT
          - PATCH
          - TRACE
          - CONNECT
          - OPTIONS
          - DELETE
      description: HTTP method of the expectation to filter by.
